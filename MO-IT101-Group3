package MotorPH;


import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

public class MotorphInitial {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter employee ID: ");
        String employeeID = scanner.nextLine();

        System.out.print("Enter employee last name: ");
        String lastName = scanner.nextLine();

        System.out.print("Enter employee first name: ");
        String firstName = scanner.nextLine();

        System.out.print("Enter login time (ex. 08:00): ");
        String loginTimeStr = scanner.nextLine();

        System.out.print("Enter logout time (ex. 17:00): ");
        String logoutTimeStr = scanner.nextLine();

        SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm");
        try {
            Date loginTime = dateFormat.parse(loginTimeStr);
            Date logoutTime = dateFormat.parse(logoutTimeStr);

            long diffInMillies = logoutTime.getTime() - loginTime.getTime();
            double hoursWorked = (double) diffInMillies / (60 * 60 * 1000);

            System.out.println("\nEmployee Details:");
            System.out.println("ID: " + employeeID);
            System.out.println("Last Name: " + lastName);
            System.out.println("First Name: " + firstName);
            System.out.println("Time In: " + loginTimeStr);
            System.out.println("Time Out: " + logoutTimeStr);
            System.out.printf("Hours Worked: %.2f\n", hoursWorked);

            int daysInMonth = 22; // Assuming an average of 22 working days in a month
            double hourlyRate = 150; // Assuming a salary of P150 per hour
            double monthlySalary = hoursWorked * daysInMonth * hourlyRate;
            System.out.printf("Monthly Salary: ₱%.2f\n", monthlySalary);

            double[][] sssContributionRanges = {
                    {0, 3250, 135.00},
                    {3250, 3750, 157.50},
                    {3750, 4250, 180.00},
                    {4250, 4750, 202.50},
                    {4750, 5250, 225.00},
                    {5250, 5750, 247.50},
                    {5750, 6250, 270.00},
                    {6250, 6750, 292.50},
                    {6750, 7250, 315.00},
                    {7250, 7750, 337.50},
                    {7750, 8250, 360.00},
                    {8250, 8750, 382.50},
                    {8750, 9250, 405.00},
                    {9250, 9750, 427.50},
                    {9750, 10250, 450.00},
                    {10250, 10750, 472.50},
                    {10750, 11250, 495.00},
                    {11250, 11750, 517.50},
                    {11750, 12250, 540.00},
                    {12250, 12750, 562.50},
                    {12750, 13250, 585.00},
                    {13250, 13750, 607.50},
                    {13750, 14250, 630.00},
                    {14250, 14750, 652.50},
                    {14750, 15250, 675.00},
                    {15250, 15750, 697.50},
                    {15750, 16250, 720.00},
                    {16250, 16750, 742.50},
                    {16750, 17250, 765.00},
                    {17250, 17750, 787.50},
                    {17750, 18250, 810.00},
                    {18250, 18750, 832.50},
                    {18750, 19250, 855.00},
                    {19250, 19750, 877.50},
                    {19750, 20250, 900.00},
                    {20250, 20750, 922.50},
                    {20750, 21250, 945.00},
                    {21250, 21750, 967.50},
                    {21750, 22250, 990.00},
                    {22250, 22750, 1012.50},
                    {22750, 23250, 1035.00},
                    {23250, 23750, 1057.50},
                    {23750, 24250, 1080.00},
                    {24250, 24750, 1102.50},
                    {24750, Double.MAX_VALUE, 1125.00},
            };

            //  PhilHealth Deduction
            double philhealthDeduction = calculatePhilHealthDeduction(monthlySalary);

            //  SSS Contribution
            double sssContribution = calculateSSSContribution(monthlySalary, sssContributionRanges);

            //  Pag-IBIG Contribution
            double pagIbigContribution = calculatePagIbigContribution(monthlySalary);

            //  Withholding Tax Deduction
            double withholdingTaxDeduction = calculateWithholdingTaxDeduction(monthlySalary);

            // Display the breakdown of deductions
            displayDeductionBreakdown(philhealthDeduction, sssContribution, pagIbigContribution, withholdingTaxDeduction);

            // Calculate total deductions and net salary
            double totalDeductions = sssContribution + philhealthDeduction + pagIbigContribution + withholdingTaxDeduction;
            double netSalary = monthlySalary - totalDeductions;

            // Display total deductions and net salary
            System.out.printf("Total Deductions: ₱%.2f\n", totalDeductions);
            System.out.printf("Net Salary: ₱%.2f\n", netSalary);

        } catch (Exception e) {
            System.out.println("Error parsing time. Please enter time in the correct format (e.g., 08:00 AM)");
        } finally {
            scanner.close();
        }
    }

    private static double calculatePhilHealthDeduction(double monthlySalary) {
        if (monthlySalary <= 10000) {
            return 300.00;
        } else if (monthlySalary <= 59999.99) {
            return Math.min(1800, monthlySalary * 0.03);
        } else {
            return 1800.00;
        }
    }

    private static double calculateSSSContribution(double monthlySalary, double[][] sssContributionRanges) {
        for (double[] range : sssContributionRanges) {
            double lowerBound = range[0];
            double upperBound = range[1];
            double deduction = range[2];

            if (monthlySalary >= lowerBound && monthlySalary < upperBound) {
                return deduction;
            }
        }
        // If the salary is not within any specified range, return 0 as the default deduction
        return 0.0;
    }

    private static double calculatePagIbigContribution(double monthlySalary) {
        // Pag-IBIG contribution ranges and rates
        double[][] pagIbigContributionRanges = {
                {1000, 1500, 0.01, 0.02, 0.03},
                {1500, Double.MAX_VALUE, 0.02, 0.02, 0.04}
        };

        for (double[] range : pagIbigContributionRanges) {
            double lowerBound = range[0];
            double upperBound = range[1];
            double employeeRate = range[2];
            double employerRate = range[3];
            double totalRate = range[4];

            if (monthlySalary >= lowerBound && monthlySalary <= upperBound) {
                return monthlySalary * totalRate;
            }
        }
        // If the salary is not within any specified range, return 0 as the default contribution
        return 0.0;
    }

    private static double calculateWithholdingTaxDeduction(double monthlySalary) {
        if (monthlySalary <= 20832) {
            return 0.0; // No withholding tax
        } else if (monthlySalary <= 33333) {
            return (monthlySalary - 20832) * 0.20; // 20% in excess of 20832
        } else if (monthlySalary <= 66667) {
            return 2500 + (monthlySalary - 33333) * 0.25; // 2500 plus 25% in excess of 33333
        } else if (monthlySalary <= 166667) {
            return 10833 + (monthlySalary - 66667) * 0.30; // 10833 plus 30% in excess of 66667
        } else if (monthlySalary <= 666667) {
            return 40833.33 + (monthlySalary - 166667) * 0.32; // 40833.33 plus 32% in excess of 166667
        } else {
            return 200833.33 + (monthlySalary - 666667) * 0.35; // 200833.33 plus 35% in excess of 666667
        }
    }

    private static void displayDeductionBreakdown(double philhealthDeduction, double sssContribution,
                                                  double pagIbigContribution, double withholdingTaxDeduction) {
        System.out.println("\nDeduction Breakdown:");
        System.out.println("Contribution Type\t\tDeduction Amount");
        System.out.printf("SSS Contribution: \t₱%.2f\n", sssContribution);
        System.out.printf("PhilHealth Deduction: \t₱%.2f\n", philhealthDeduction);
        System.out.printf("Pag-IBIG Contribution: \t₱%.2f\n", pagIbigContribution);
        System.out.printf("Withholding Tax: \t₱%.2f\n", withholdingTaxDeduction);
        System.out.println();
    }
}

    
